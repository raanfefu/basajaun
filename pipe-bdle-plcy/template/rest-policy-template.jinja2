package envoy.authz

import future.keywords.if
import future.keywords.in

default allow = false

{%- macro term_render(statement) -%} 
    {%- if 'body' in statement.type -%} 
         input.parsed_body.{{ statement.uri }} 
    {%- endif -%}
    {%- if 'header' in statement.type -%} 
         input.attributes.request.http.headers["{{ statement.uri }}"]
    {%- endif -%}
    {%- if 'data' in statement.type -%} 
         data.{{ statement.uri }}
    {%- endif -%}
    {%- if 'const' in statement.type -%} 
         "{{ statement.uri }}"
    {%- endif -%}
    {%- if 'path' in statement.type -%} 
        request.http.path."{{ statement.uri }}"
    {%- endif -%}
{%- endmacro -%}

{%- macro func_render(statement) -%} 
    {%- if 'equals' in statement.func.type -%} 
        ==
    {%- endif -%}
    {%- if 'in' in statement.func.type -%} 
        in
    {%- endif -%}
{%- endmacro -%}
 

{%+ for policy in policies  +%}

allow if {
    input.attributes.request.http.method == "{{ policy.action }}"
    input.attributes.request.http.path   == "{{ policy.uri_resource }}"
 {% for statement in policy.statements  %}    
    {{ term_render(statement) }} {{ func_render(statement) }}  {{ term_render(statement.func.term) }} 
 {% endfor %}
}
{% endfor %}